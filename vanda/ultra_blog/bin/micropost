#! /usr/bin/env python
# -----------------------------------------------------------------------------
#    Ultra Blog - Data type base blog application for Vanda platform
#    Copyright (C) 2011-2012 Sameer Rahmani <lxsameer@gnu.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# -----------------------------------------------------------------------------

import os
import json
import urllib
import hashlib
import urllib2
from optparse import OptionParser


CONF = os.path.join(os.environ['HOME'], '.micropost.json')

def get_default_host():
    """
    Parse the configuration file and return default host.
    """
    try:
        dic = json.load(file(CONF))
        return dic['default_host']
    except IOError:
        return "lxsameer.com"

    except KeyError:
        print "You did not provide 'default_host' in '~/.micropost.json'."
        exit(1)

    except ValueError:
        print "Error: '~/.micropost.json' did not contain json data."
        exit(1)


class UltraBlogMicroPost(object):
    """
    Dummy class for sending micro post to ultra_blog server.
    """

    def __init__(self, host, key, secret, status, url=None, debug=False):
        self.host = host
        self.key = key
        self.secret = secret
        self.st = status
        self.url = url or "/blog/api/micro/"
        self.debug = debug

    def send(self, content):
        """
        Send the content to server.
        """
        data = {"status": self.st}
        m = hashlib.sha1()
        m.update("%s%s" % (self.secret, content))
        data["checksum"] = m.hexdigest()
        data["key"] = self.key.strip()
        data["log"] = content
        domain = "http://%s/%s" % (self.host.rstrip("/"),
                            self.url.lstrip("/"))

        try:
            conn = urllib2.urlopen(domain, urllib.urlencode(data))
        except urllib2.HTTPError, e:
            print str(e)
            print
            print "Result Page:"
            print e.read()
            print 
            print "Check your configuration and url."
            exit(1)

        print "[", conn.code, "] > ",
        result = conn.read()
        if result == "OK":
            print "Your post sent successfully."
        else:
            print result


if __name__ == "__main__":

    parser = OptionParser()
    parser.set_defaults(
        host=get_default_host(),
        debug=False,
        status="",
        )
    
    parser.add_option('-d', "--domain", dest='host',
                      help="Send micro post to remote HOST.")
    parser.add_option('--debug', dest='debug', action="store_true",
                      help="Activate debug mode.")
    parser.add_option('-s', "--status", dest='status',
                      help="Micro post Status")
    parser.add_option('-i', dest='interactive',
                      help="Use interactive mode for sending post.")
    parser.add_option('-p', "--post", dest='post',
                      help="Post content. don't forget to put post inside \" \".")

    options, args = parser.parse_args()

    conf = json.load(file(CONF))
    apikey = conf[options.host]["apikey"]
    secret = conf[options.host]["secret"]
    url = None
    if "url" in conf[options.host]:
        url = conf[options.host]["url"]

    sender = UltraBlogMicroPost(options.host, apikey, secret, options.status,
                                url=url, debug=options.debug)
    sender.send(options.post)
